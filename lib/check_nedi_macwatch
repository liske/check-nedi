#!/usr/bin/perl

# nagios: -epn

# nedi-macwatch - nagios plugin using NeDi's node table to monitor MAC addresses
#
# Authors:
#   Thomas Liske <thomas@fiasko-nw.net>
#
# Copyright Holder:
#   2014 (C) Thomas Liske [http://fiasko-nw.net/~thomas/]
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this package; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#

use strict;
use warnings;
no warnings qw(once);

use lib "/usr/lib/nagios/plugins";
use Nagios::Plugin qw(%ERRORS);

use Getopt::Std;
use Data::Dumper;

use vars qw(%opt $p $now %nod);

getopts('dvp:U:I:',\%opt) || &HELP_MESSAGE;

$now = time;

unless(exists($opt{p})) {
    $p = $0;
    $p =~ s/(.*)\/(.*)/$1/;
    $p = "." if($0 eq $p);
}
else {
    $p = $opt{p};
}

$misc::dbname = $misc::dbhost = $misc::dbuser = $misc::dbpass = '';

require "$p/inc/libmisc.pm";										# Use the miscellaneous nedi library
require "$p/inc/libdb.pm";										# Use the DB function library

&misc::ReadConf();

&db::Connect($misc::dbname,$misc::dbhost,$misc::dbuser,$misc::dbpass,1);

$db::dbh->do('CREATE TABLE IF NOT EXISTS cn_mw_nodes (mac CHAR(16) NOT NULL, vlanid INT NOT NULL, comment TEXT, ack BOOL DEFAULT false, PRIMARY KEY(mac, vlanid))');
$db::dbh->do('CREATE TABLE IF NOT EXISTS cn_mw_monitors (mac CHAR(16) NOT NULL, comment TEXT, PRIMARY KEY(mac))');
my $lseen = scalar time - 86400;
&db::ReadNod("vlanid=$opt{I} AND (lastseen > $lseen OR EXISTS (SELECT 1 FROM cn_mw_nodes WHERE cn_mw_nodes.vlanid = nodes.vlanid AND cn_mw_nodes.mac=nodes.mac))");
my $monitors = &db::Select('cn_mw_monitors', 'mac', 'mac,comment');

my @unkmacs;
my @monmacs;
foreach my $mac (keys %nod) {
    #B<Options> table, [hashkey], columns, match statement, join, using column(s)
    my $iftype = &db::Select('interfaces', '', 'iftype', "device='$nod{$mac}->{dv}' AND ifname='$nod{$mac}->{if}' LIMIT 1");
    my $ack = &db::Select('cn_mw_nodes', 'mac', 'mac,vlanid,ack', "mac='$mac' AND vlanid=$nod{$mac}->{vl}");

    my $status = 0;
    if(exists($monitors->{$mac})) {
	$status = 1;
    }
    unless(scalar keys %$ack) {
	# ignore ieee80211(71) ports
	if($iftype eq '71') {
	    delete($nod{$mac});
	    next;
	}

	&db::Insert('cn_mw_nodes', 'mac,vlanid', "'$mac',$opt{I}");
	$status = 2;
    }
    elsif(!$ack->{$mac}->{ack}) {
	$status = 2;
    }

    push(@monmacs, $mac) if($status == 1);
    push(@unkmacs, $mac) if($status == 2);
}

my $state = ($#unkmacs > -1 ? qq(CRITICAL) : ($#monmacs > -1 ? qq(WARNING) : qq(OK)));
my @msg;
push(@msg, ($#unkmacs + 1).' unknown') if($#unkmacs > -1);
push(@msg, ($#monmacs + 1).' monitored') if($#monmacs > -1);
push(@msg, ((scalar keys %nod) - $#unkmacs - $#monmacs - 2).' known');

my $msg = (scalar keys %nod == 0 ? 'no' : join(', ', @msg)).' MAC addresses';
print "VID$opt{I} $state - $msg";
printf " | 'MACs found'=%d;;;0 'MACs monitored'=%d;1;;0 'MACs unknown'=%d;;1;0", scalar keys %nod, 0, ($#unkmacs + 1);

sub fnode($$) {
    my $nod = shift;
    my $pmac = shift;

    return (($nod->{na} && $nod->{na} ne '-') ? $nod->{na}."[$pmac]" : $pmac);
}

foreach my $mac (sort @monmacs) {
    my $pmac = $mac;
    1 while($pmac =~ s/([\da-f][\da-f])([\da-f][\da-f])/$1:$2/gi);
    printf("\nmon: %s at %s%%%s", fnode($nod{$mac}, $pmac), $nod{$mac}->{dv}, $nod{$mac}->{if});
}

foreach my $mac (sort @unkmacs) {
    my $pmac = $mac;
    1 while($pmac =~ s/([\da-f][\da-f])([\da-f][\da-f])/$1:$2/gi);
    printf("\nunk: %s at %s%%%s", fnode($nod{$mac}, $pmac), $nod{$mac}->{dv}, $nod{$mac}->{if});
}
print "\n";

exit $ERRORS{$state};

sub HELP_MESSAGE{
	print "Bad arguments!\n";
	exit $ERRORS{'UNKNOWN'};
}
